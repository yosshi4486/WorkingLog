import UIKit

/*:
 # きょうの作業ログ　2020/08/24
 朝一番、一時間を目処にこの「アルゴリズムとデータ構造」の内容を一通りさらっていきます。
 
 https://www.codereading.com/algo_and_ds/
 
 ・PlaygroundsのSourcesの下においてもアクセスコントロールをpublicにしないと参照できない。
 
 ・各種アルゴリズムのベンチマークを取ってみる。10000回検索を回す。1000の理由は、10万だと実行者が長すぎると感るし、1000回だとハッキリわかるほど差が出ない。1万だとちょうど良い。各自10, 100倍を脳内で実行してもらいながら見てもらえれば良いかと思う。
 
 ・Playgroundが部分実行できないのでページごとに分割してみた。ページ内に子ページを設けたい...。
 
 ・どうやらUIImageを使って表示していた画像、普通にマークダウンで表示できたっぽい。
 https://developer.apple.com/library/archive/documentation/Xcode/Reference/xcode_markup_formatting_ref/Images.html#//apple_ref/doc/uid/TP40016497-CH17-SW1
 
 ・試しにやってみる。
 
 ![サンプル画像](NewPlaygroundPage.png)
 
 ・できた。動画もいけるっぽい。
 
・ [ソートを可視化](https://www.youtube.com/watch?v=kPRA0W1kECg&ref=pc_watch_description)の動画が分かり易かった。
 
 ・[計算量について、償却/期待/平均など](https://noshi91.hatenablog.com/entry/2019/10/08/235335)
 
 ・計算量の話とBig O notationは別の話。
 
 https://ja.wikipedia.org/wiki/ランダウの記号, 概要から引用
 
 > ランダウの記号 f(x)=O(g(x))は、変数xを極限に飛ばした時の関数fの振る舞い(漸近的挙動)を、別の関数gを目安にして記述する目的で用いられる。
 例えば、f(x) = 3x^2 + 4x -5において、xを∞に飛ばした時のfの挙動を考えると、xが十分に大きいところでは第一項がその他の項に比べて極端に大きく、二項目以降はいわば「誤差」に過ぎなくなる。従ってfの挙動は「定数*x^2」とほぼ等しくなる。ランダウのO-記法を用いることでこの事実を
 f(x) = O(x^2)と書き表すことが出来る。
また、前述の関数fは二次関数であるので、xが十分大きいところではx^3よりはるかに小さい。ランダウのo-記法を用いることでこの事実をf(x)=o(x^3)と書き表すことが出来る。
 
 ・つまり計算機科学で頻繁に目にするBigO記法は、ランダウの記法のO-記法(Big O notation)、o-記法(Small o notation)のうちの前者であったということ。
 
 ・このような記法は「漸近記法」と呼ばれる。数学的に厳密な定義があり、上界、下界などあるみたい。
 
 ・多変数の場合にも、このランダウの記法にも使える。
 
 ・時間計算量の計算には、一般的に最悪計算量が使われる。
 
 ・計算量にはいくつか種類がある。
 
 ### 最良計算量
 あり得る全ての入力のうち計算量の最小値を、最良計算値と呼び、best O(1)のように書く。
 
 例えば、線形探索で最初の要素が探索対象だった場合は
 > best O(1)
 
 ### 最悪計算量
 あり得る全ての入力のうち計算量の最大値を、最悪計算値とよび、worst O(n^2)のように書く。
 線形探索で、探索対象が最後の要素だった場合は
 > worst O(n)
 
 前に何も付かずO(n)と記述された場合は、この最悪計算量を指している場合が多い。

 ### 平均計算量
 全ての入力に対しての平均を平均計算量とよび、 average O(N log N)のように書く。
 
 ### 期待計算量
 乱数をとるアルゴリズムにおいて、計算量の期待値を期待計算量とよび、expected O(n^2)のように書く。
 
 ### 償却計算量
 償却計算量とは、ならし計算量と言われる。
 
 調べていてよく出てきたのが、動的配列への要素の追加で、
 現在確保している領域への要素の追加はO(1)であるが、そのサイズを超えて要素をpushしようとするとO(n)の時間計算量がかかる。
 
 これの平均をとるとO((n + 1) / n) = O(1)の定数時間となる。
 
 amortized: O(1)と書く。

 償却というのは、減価償却の「ある時期に発生した出費、売上などを、耐用年数を決めて均等分配することで、会計システム上取り扱いやすくする」という考え方と同じで、最悪の時の計算量を平均的に分配(=償却)して計算量を考える。ということ。
 
 ・ソートアルゴリズム学ぶときに、手元にブロックかなんかあったら便利やな。
 
 ・https://www.youtube.com/watch?v=z0YcQIqyV5Q
 
 この動画がひっじょうにわかりやすい。やっぱり動きが見えると理解が大変助かる分野あるなぁ。ありがとう。
 
 ・https://www.youtube.com/watch?time_continue=47&v=CmPA7zE8mx0&feature=emb_logo
 このフォークダンス踊りながらソート教えてくれるの、本当にすごい分かりやすい。
 
 
 ## 検索アルゴリズム
 - [Linear Seach](LinearSearch)
 - [Binary Seach](BinarySearch)
 
 ## ソートアルゴリズム
 - [Bubble Sort](BubbleSort)
 - [Selection Sort](SelectionSort)
 - [Inseration Sort](InserationSort)
 - [Shell Sort](ShellSort)
*/
